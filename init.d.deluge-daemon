#!/bin/bash
### BEGIN INIT INFO
# Provides:          deluge-daemon
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Should-Start:      $network
# Should-Stop:       $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Daemonized version of deluge and webui.
# Description:       Starts the deluge daemon with the user specified in
#                    /etc/default/deluge-daemon.
### END INIT INFO

# Author: Adolfo R. Brandes 

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="Deluge Daemon"
UMASK=002                     # Change this to 0 if running deluged as its own user
PKGNAME=deluge-daemon
SCRIPTNAME=/etc/init.d/$PKGNAME

# Read configuration variable file if it is present
[[ -r /etc/default/${PKGNAME} ]] && . /etc/default/${PKGNAME}

# Load the VERBOSE setting and other rcS variables
[[ -f /etc/default/rcS ]] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

for i in $( seq ${#DAEMON_ENABLED[@]} ); do
    [[ ${DAEMON_ENABLED[$i]} -ne 0 ]] && continue

    # Exit if the package is not installed
    if [[ ! -x ${DAEMON_PATH[$i]} ]]; then
        log_failure_msg "Configuration error daemon $i does not exist or not an executable"
        exit 1
    fi
done

if [ -z "${RUN_AT_STARTUP}" -o "${RUN_AT_STARTUP}" != "YES" ]
then
   log_failure_msg "Not starting $PKGNAME, edit /etc/default/$PKGNAME to start it."
   exit 1
fi

if [[ -z "$DELUGED_USER" ]]
then
    log_failure_msg "Not starting $PKGNAME, DELUGED_USER not set in /etc/default/$PKGNAME."
    exit 1
fi

#
# Function that starts the daemon/service
#
do_start()
{
    errors=0
    for i in $( seq ${#DAEMON_ENABLED[@]} ); do
        [[ ${DAEMON_ENABLED[$i]} -ne 0 ]] && continue

        start-stop-daemon --start --background --quiet --pidfile /var/run/${DAEMON_NAME[$i]}$i --startas ${DAEMON_PATH[$i]} \
            --chuid ${DELUGED_USER} --user ${DELUGED_USER} --umask ${UMASK} --test > /dev/null
	if [ $? -eq 0 ]; then
            start-stop-daemon --start --background --quiet --pidfile /var/run/${DAEMON_NAME[$i]}$i --make-pidfile \
                --exec ${DAEMON_PATH[$i]} --chuid ${DELUGED_USER} --user ${DELUGED_USER} --umask ${UMASK} -- ${DAEMON_ARGS[$i]}
            [[ $? -ne 0 ]] && errors=$(($errors+1))
            sleep 2
        fi
    done
    return $errors
}

#
# Function that queries the daemon/service status
#
do_status()
{
    errors=0
    for i in $( seq ${#DAEMON_ENABLED[@]} ); do
        [[ ${DAEMON_ENABLED[$i]} -ne 0 ]] && continue

        status_of_proc -p /var/run/${DAEMON_NAME[$i]}$i ${DAEMON_PATH[$i]} "[$i] ${DAEMON_NAME[$i]}"
        [[ $? -ne 0 ]] && errors=$(($errors+1))
    done
    return $errors
}

#
# Function that stops the daemon/service
#
do_stop()
{
   # Return
   #   0 if daemon has been stopped
   #   1 if daemon was already stopped
   #   2 if daemon could not be stopped
   #   other if a failure occurred

    errors=0
    for i in $( seq ${#DAEMON_ENABLED[@]} ); do
        [[ ${DAEMON_ENABLED[$i]} -ne 0 ]] && continue

        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --user ${DELUGED_USER} \
            --pidfile /var/run/${DAEMON_NAME[$i]}$i
        if [ $? -eq 2 ]; then
            errors=$(($errors+1))
        else
            rm -f /var/run/${DAEMON_NAME[$i]}$i
        fi
    done
    return $errors
}

case "$1" in
  start)
   [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME1"
   do_start
   ret_val=$?
   case "$?" in
      0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      *) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
   esac
   exit $ret_val
   ;;
  stop)
   [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME1"
   do_stop
   ret_val=$?
   case "$?" in
      0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      *) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
   esac
   exit $ret_val
   ;;
  status)
   do_status
   exit $?
   ;;
  restart|force-reload)
   log_daemon_msg "Restarting $DESC" "$NAME1"
   do_stop
   ret_val=$?
   case "$?" in
     0|1)
      do_start
      ret_val=$?
      case "$?" in
         0) log_end_msg 0 ;;
         1) log_end_msg 1 ;; # Old process is still running
         *) log_end_msg 1 ;; # Failed to start
      esac
      exit $ret_val
      ;;
     *)
        # Failed to stop
      log_end_msg 1
      exit $ret_val
      ;;
   esac
   ;;
  *)
   echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
   exit 3
   ;;
esac

:
